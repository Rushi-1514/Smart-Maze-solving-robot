import cv2
import numpy as np
import math
import heapq
import matplotlib.pyplot as plt
import pprint
class Cell:
    def __init__(self):
        self.parent_i = 0
        self.parent_j = 0
        self.f = float('inf')
        self.g = float('inf')
        self.h = 0
def is_valid(row, col, ROW, COL):
    return (row >= 0) and (row < ROW) and (col >= 0) and (col < COL)
def is_unblocked(grid, row, col):
    return grid[row][col] == 1
def is_destination(row, col, dest):
    return row == dest[0] and col == dest[1]
def calculate_h_value(row, col, dest):
    return ((row - dest[0]) ** 2 + (col - dest[1]) ** 2) ** 0.5
def trace_path(cell_details, dest):
    path = []
    row = dest[0]
    col = dest[1]
    while not (cell_details[row][col].parent_i == row and cell_details[row][col].parent_j == col):
        path.append((row, col))
        temp_row = cell_details[row][col].parent_i
        temp_col = cell_details[row][col].parent_j
        row = temp_row
        col = temp_col
    path.append((row, col))
    path.reverse()
    return path
def a_star_search(grid, src, dest):
    ROW = len(grid)
    COL = len(grid[0])

    if not is_valid(src[0], src[1], ROW, COL) or not is_valid(dest[0], dest[1], ROW, COL):
        print("Source or destination is invalid")
        return []

    if not is_unblocked(grid, src[0], src[1]) or not is_unblocked(grid, dest[0], dest[1]):
        print("Source or the destination is blocked")
        return []

    if is_destination(src[0], src[1], dest):
        print("We are already at the destination")
        return [src]

    closed_list = [[False for _ in range(COL)] for _ in range(ROW)]
    cell_details = [[Cell() for _ in range(COL)] for _ in range(ROW)]

    i, j = src
    cell_details[i][j].f = 0
    cell_details[i][j].g = 0
    cell_details[i][j].h = 0
    cell_details[i][j].parent_i = i
    cell_details[i][j].parent_j = j

    open_list = []
    heapq.heappush(open_list, (0.0, i, j))
    found_dest = False

    while open_list:
        p = heapq.heappop(open_list)
        i, j = p[1], p[2]
        closed_list[i][j] = True

        directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
        for dir in directions:
            new_i, new_j = i + dir[0], j + dir[1]
            if is_valid(new_i, new_j, ROW, COL) and is_unblocked(grid, new_i, new_j) and not closed_list[new_i][new_j]:
                if is_destination(new_i, new_j, dest):
                    cell_details[new_i][new_j].parent_i = i
                    cell_details[new_i][new_j].parent_j = j
                    return trace_path(cell_details, dest)
                else:
                    g_new = cell_details[i][j].g + 1.0
                    h_new = calculate_h_value(new_i, new_j, dest)
                    f_new = g_new + h_new
                    if cell_details[new_i][new_j].f == float('inf') or cell_details[new_i][new_j].f > f_new:
                        heapq.heappush(open_list, (f_new, new_i, new_j))
                        cell_details[new_i][new_j].f = f_new
                        cell_details[new_i][new_j].g = g_new
                        cell_details[new_i][new_j].h = h_new
                        cell_details[new_i][new_j].parent_i = i
                        cell_details[new_i][new_j].parent_j = j

    print("Failed to find the destination cell")
    return []
def image_to_grid(image_path):
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    _, binary_image = cv2.threshold(image, 127, 255, cv2.THRESH_BINARY)
    grid = (binary_image // 255).astype(int)
    return grid, image
def draw_path(image, path):
    for point in path:
        cv2.circle(image, (point[1], point[0]), 5, (0, 0, 255), -1)
    return image
def line_of_sight(grid, point1, point2):
    """ Check if there's a direct line of sight between point1 and point2 """
    x1, y1 = point1
    x2, y2 = point2
    dx = abs(x2 - x1)
    dy = abs(y2 - y1)
    sx = 1 if x1 < x2 else -1
    sy = 1 if y1 < y2 else -1
    err = dx - dy

    while (x1 != x2 or y1 != y2):
        if not is_valid(x1, y1, len(grid), len(grid[0])) or not is_unblocked(grid, x1, y1):
            return False
        e2 = err * 2
        if e2 > -dy:
            err -= dy
            x1 += sx
        if e2 < dx:
            err += dx
            y1 += sy

    return True
def smooth_path(grid, path):
    if len(path) < 3:
        return path

    smooth_path = [path[0]]

    i = 0
    while i < len(path) - 2:
        j = i + 2
        while j < len(path) and line_of_sight(grid, path[i], path[j]):
            j += 1
        smooth_path.append(path[j - 1])
        i = j - 1

    if smooth_path[-1] != path[-1]:
        smooth_path.append(path[-1])

    return smooth_path
def draw_path(image, path, start, end):
    # Draw the path
    for i in range(len(path) - 1):
        start_point = (path[i][1], path[i][0])
        end_point = (path[i + 1][1], path[i + 1][0])
        cv2.line(image, start_point, end_point, (0, 0, 255), 2)

    # Draw start point
    cv2.circle(image, (start[1], start[0]), 5, (0, 255, 0), -1)
    cv2.putText(image, 'Start', (start[1] - 10, start[0] - 10), cv2.FONT_HERSHEY_SIMPLEX,
                0.5, (0, 255, 0), 2)

    # Draw end point
    cv2.circle(image, (end[1], end[0]), 5, (255, 0, 0), -1)
    cv2.putText(image, 'End', (end[1] - 10, end[0] - 10), cv2.FONT_HERSHEY_SIMPLEX,
                0.5, (255, 0, 0), 2)

    return image
def main():
    image_path = r'C:\Users\rushi\Downloads\maze.png'
    grid, image = image_to_grid(image_path)

    src = (360, 320)  # Example source; change as needed
    dest = (30, 180)  # Example destination; change as needed

    path = a_star_search(grid, src, dest)
    if path:
        print("Original Path: ")
        pprint.pprint(path)
        smooth_path_result = smooth_path(grid, path)
        print("Smoothed Path: ")
        pprint.pprint(smooth_path_result)
        image_with_path = draw_path(image, smooth_path_result, src, dest)

        image_with_path_rgb = cv2.cvtColor(image_with_path, cv2.COLOR_BGR2RGB)

        plt.figure(figsize=(10, 10))
        plt.imshow(image_with_path_rgb)
        plt.title('Path from Source to Destination')
        plt.xlabel('X-axis')
        plt.ylabel('Y-axis')
        plt.grid(True)
        plt.xticks(np.arange(0, image.shape[1], 50))
        plt.yticks(np.arange(0, image.shape[0], 50))
        plt.show()

if __name__ == "__main__":
    main()


